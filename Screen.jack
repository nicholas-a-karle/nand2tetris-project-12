// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static boolean color;
    static int screenStart, screenEnd, ;
    static Array twoTo;

    /** Initializes the Screen. */
    function void init() {
        let color = true;
        let screenStart = 16384;
        let screenEnd = 24576;

        let twoTo = Array.new(16);
        let twoTo[0] = 1;
        let twoTo[1] = 2;
        let twoTo[2] = 4;
        let twoTo[3] = 8;
        let twoTo[4] = 16;
        let twoTo[5] = 32;
        let twoTo[6] = 64;
        let twoTo[7] = 128;
        let twoTo[8] = 256;
        let twoTo[9] = 512;
        let twoTo[10] = 1024;
        let twoTo[11] = 2048;
        let twoTo[12] = 4096;
        let twoTo[13] = 8192;
        let twoTo[14] = 16384;
        let twoTo[15] = 32767;

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var i;
        let i = screenStart;
        while (i < screenEnd) {
            do Memory.poke(i, 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int bit, addr, val;

        let bit = x / 16;
        let addr = screenStart + ((y * 32) + bit);
        let bit = x - (bit*16);
        let val = Memory.peek(addr);
        

        /*
        bit = 0th bit at addr
        mem[addr]_2 = 0000 0000 0000 0000
        |  1        = 0000 0000 0000 0001
        & ~1        = 0000 0000 0000 0000
        */
        if (color) {
            let val = val | twoTo[bit];
        } else {
            let val = val & (~twoTo[bit]);
        }

        do Memory.poke(addr, val);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int x, y, dx, dy, a, b, diff;
        let x = x1;
        let y = y1;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;
        let diff = 0;
        while ((a < dx + 1) & (b < dy + 1)) {
            do drawPixel(x + a, y + b);
            if (diff < 0) {
                a = a + 1;
                diiff = diff + dy;
            } else {
                b = b + 1;
                diff = diff - dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        /*
        (x1, y1)    (x2, y1)

        (x1, y2)    (x2, y2)
        */
        do drawLine(x1, y1, x1, y2);
        do drawLine(x1, y2, x2, y2);
        do drawLine(x2, y2, x2, y1);
        do drawLine(x2, y1, x1, y1);
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;
        let dy = -r;
        while (dy < r + 1) {
            do drawLine(x - Math.sqrt((r * r) - (dy * dy)), y + dy, x + Math.sqrt((r * r) - (dy * dy)) , y + dy);
            dy = dy + 1;
        }
    }
}
