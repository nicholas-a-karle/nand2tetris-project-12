// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

field Array chars;
field int len;

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength < 1) {
			let chars = Array.new(1);
		}
		else {
			let chars = Array.new(maxLength);
		}
		
		let len = 0;
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do characters.dispose();
		do Memory.deAlloc(this);
		return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j > len | j = len) {
            return 0;
        }
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j > len | j = len) {
            return;
        }
        let chars[j] = c;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let chars[len] = c;
        let len = len + 1
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (len = 0) {
            return;
        }
        let len = len - 1;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, c, magnitude, value;
        var bool neg;
        let i = 0;
        let value = 0;
        if (chars[i] = 45) {
            let neg = true;
            let i = i + 1;
        } else {
            let neg = false;
        }

        var Array powersOfTen;
		let powersOfTen = Array.new(6);
        let powersOfTen[0] = 1;
		let powersOfTen[1] = 10;
		let powersOfTen[2] = 100;
		let powersOfTen[3] = 1000;
		let powersOfTen[4] = 10000;
		let powersOfTen[5] = 100000;
        let magnitude = powersOfTen[min(len, 6) - 1];

        while (i < len && i < 6) {
            if (char[i] == 48) {
                let c = 0;
            } else if (char[i] == 49) {
                let c = 1;
            } else if (char[i] == 50) {
                let c = 2;
            } else if (char[i] == 51) {
                let c = 3;
            } else if (char[i] == 52) {
                let c = 4;
            } else if (char[i] == 53) {
                let c = 5;
            } else if (char[i] == 54) {
                let c = 6;
            } else if (char[i] == 55) {
                let c = 7;
            } else if (char[i] == 56) {
                let c = 8;
            } else if (char[i] == 57) {
                let c = 9;
            } else {
                let i = len;
            }
            let value = value + multiply(magnitude, c);
            let i = i + 1;
            let magnitude = powersOfTen[min(len, 6) - i - 1];
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int decimalLength, sigDig, valTemp, decimalLength;
        if (val == 0) {
            do appendChar(48);
        }

        if(val < 0) {
			do appendChar(45);
			let valTemp = -val;
		} else {
			let valTemp = val;
		}

        let sigDig = valTemp;

        while(valTemp > 0) {
			let decimalLength = 1;
			let sigDig = valTemp;
			
			while(sigDig > 10)
			{
				let sigDig = sigDig / 10;
				let decimalLength = decimalLength + 1;
			}
			
			do appendChar(sigDig + 48);
			
			let valTemp = valTemp - (sigDig * powersOfTen[decimalLength]);
		}
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
